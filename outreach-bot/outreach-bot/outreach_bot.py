import config
print("DEBUG: api_id   =", repr(config.api_id))
print("DEBUG: api_hash =", repr(config.api_hash))
print("DEBUG: phone    =", repr(config.phone))

import pandas as pd
import time
import requests
import logging
import os
import glob
from pathlib import Path
from telethon import TelegramClient, functions, types, events
from telethon.tl.types import User
from config import api_id, api_hash, phone, notify_user_id, ollama_api_url, model_name, delay_seconds, llm_provider, gemini_api_key, gemini_daily_limit, gemini_cooldown_seconds, audio_notification_enabled
import asyncio
import random
import re
import importlib
import aiohttp
import json
from functools import lru_cache
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai
import sqlite3
from typing import List, Dict
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import database_functions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='outreach_debug.log'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = 'YOUR_BOT_TOKEN'
GOOGLE_API_KEY = 'YOUR_GOOGLE_API_KEY'
DB_PATH = 'outreach_bot.db'
KNOWLEDGE_BASE_DIR = 'knowledge_base'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

logging.info('--- –ó–∞–ø—É—Å–∫ outreach_bot.py ---')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
import logic

# –ö—ç—à –¥–ª—è LLM –æ—Ç–≤–µ—Ç–æ–≤
llm_cache = {}
CACHE_SIZE = 100

# –°–µ—Å—Å–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
session = None

# –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ª–∏–º–∏—Ç–æ–≤ Gemini
gemini_request_count = 0
gemini_last_request_time = 0
gemini_daily_requests = 0
gemini_last_reset = time.time()
gemini_minute_requests = []  # –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É

async def get_session():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç aiohttp —Å–µ—Å—Å–∏—é"""
    global session
    if session is None or session.closed:
        session = aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15))
    return session

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_knowledge_base():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        knowledge_content = database_functions.get_knowledge_base()
        if knowledge_content:
            logging.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(knowledge_content)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ –ë–î')
            return [f"=== {item['filename']} ===\n{item['content']}\n" for item in knowledge_content]
        else:
            logging.info('–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–æ–≤')
            return load_knowledge_from_files()
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ –ë–î: {e}')
        return load_knowledge_from_files()

def load_knowledge_from_files():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ (fallback)"""
    knowledge_content = []
    
    if not os.path.exists(KNOWLEDGE_BASE_DIR):
        logging.info(f'–ü–∞–ø–∫–∞ {KNOWLEDGE_BASE_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
        return knowledge_content
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
    supported_extensions = ['*.txt', '*.md', '*.csv']
    
    for extension in supported_extensions:
        pattern = os.path.join(KNOWLEDGE_BASE_DIR, '**', extension)
        files = glob.glob(pattern, recursive=True)
        
        for file_path in files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    filename = os.path.basename(file_path)
                    knowledge_content.append(f"=== {filename} ===\n{content}\n")
                    logging.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {filename}')
            except Exception as e:
                logging.error(f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}')
    
    if knowledge_content:
        logging.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(knowledge_content)} —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π')
    else:
        logging.info('–§–∞–π–ª—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    
    return knowledge_content

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
knowledge_base = load_knowledge_base()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
def get_relevant_knowledge(query, max_chars=1000):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    if not knowledge_base:
        return ""
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    query_lower = query.lower()
    relevant_parts = []
    
    for content in knowledge_base:
        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if any(word in content.lower() for word in query_lower.split()):
            relevant_parts.append(content)
    
    if relevant_parts:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞—Å—Ç–∏
        combined = "\n".join(relevant_parts)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(combined) > max_chars:
            combined = combined[:max_chars] + "..."
        return f"\n\nüìö –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{combined}"
    
    return ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_current_prompt():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        active_prompt = database_functions.get_active_prompt()
        if active_prompt:
            return active_prompt['content']
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return """
–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—ã –†–æ–ª–ª–∞–Ω ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –≤ –∫–æ–º–ø–∞–Ω–∏–∏ bored.kz. –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–π—Ç—ã, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã, –≤–µ–±-—Å–µ—Ä–≤–∏—Å—ã, –ø–æ—Ä—Ç–∞–ª—ã –∏ –¥–µ–ª–∞–µ–º UX/UI-–¥–∏–∑–∞–π–Ω. –¶–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ—Ç 50 000 —Ç–µ–Ω–≥–µ.

–¢—ã –ø–∏—à–µ—à—å –ø–µ—Ä–≤—ã–º ¬´—Ö–æ–ª–æ–¥–Ω–æ–º—É¬ª –∫–æ–Ω—Ç–∞–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∏—á–µ–≥–æ –æ –Ω–∞—Å –Ω–µ –∑–Ω–∞–µ—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–µ–∂–ª–∏–≤–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.

üí¨ –ü—Ä–∞–≤–∏–ª–∞:
- –ü–∏—à–∏ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º, –Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–º —Ç–æ–Ω–µ.
- –ò—Å–ø–æ–ª—å–∑—É–π emoji –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ.
- –ù–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –≤—Å–µ —É—Å–ª—É–≥–∏ –∏ –Ω–µ –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –±—É–¥—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º.
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ª–∏ —á–µ–ª–æ–≤–µ–∫ –±–∏–∑–Ω–µ—Å–æ–º, –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –ª–∏ –µ–º—É —Å–∞–π—Ç, –Ω—É–∂–µ–Ω –ª–∏ –Ω–æ–≤—ã–π –≤–∏–∑—É–∞–ª.
- –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è ‚Äî –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ –æ—Ç–≤–µ—Ç –∏ –±–æ–ª—å—à–µ –Ω–µ –ø–∏—à–∏.
- –ï—Å–ª–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω ‚Äî —É—Ç–æ—á–Ω–∏, –∫–∞–∫–æ–π —Å–∞–π—Ç –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.

‚úèÔ∏è –ó–∞–¥–∞—á–∞: —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ù–û –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —Ü–µ–ø–ª—è—é—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —Ö–æ–ª–æ–¥–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º. –í–∫–ª—é—á–∏:
1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å),
2. –ö—Ç–æ —Ç—ã –∏ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è bored.kz,
3. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞, –≤–∏–∑—É–∞–ª, –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞),
4. –í–æ–ø—Ä–æ—Å –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –±–∏–∑–Ω–µ—Å–æ–º?¬ª –∏–ª–∏ ¬´–±—ã–ª–æ –±—ã –∞–∫—Ç—É–∞–ª—å–Ω–æ –æ–±—Å—É–¥–∏—Ç—å —Å–∞–π—Ç?¬ª).

–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –ø—Ä–∏–º–µ—Ä—ã, –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–π –æ–¥–∏–Ω –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∫–∞–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
"""
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –ë–î: {e}')
        return ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_dialog_prompt():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        prompts = database_functions.get_prompts()
        # –ò—â–µ–º –ø—Ä–æ–º–ø—Ç —Å –∏–º–µ–Ω–µ–º "dialog" –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π "–¥–∏–∞–ª–æ–≥"
        for prompt in prompts:
            if 'dialog' in prompt['name'].lower() or '–¥–∏–∞–ª–æ–≥' in prompt['name'].lower():
                return prompt['content']
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return """
–¢—ã –≤–µ–¥—ë—à—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ Telegram –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏ bored.kz. –ú—ã –¥–µ–ª–∞–µ–º —Å–∞–π—Ç—ã, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã, –≤–µ–±-—Å–µ—Ä–≤–∏—Å—ã –∏ UX/UI-–¥–∏–∑–∞–π–Ω. –¶–µ–Ω—ã –æ—Ç 50 000 —Ç–µ–Ω–≥–µ.

–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ ¬´—Ö–æ–ª–æ–¥–Ω—ã–µ¬ª –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –õ—é–¥–∏ —á–∞—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—é—Ç —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥. –ù–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–µ ‚Äî **–¥–æ–∂–¥–∏—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ –º–∏–Ω—É—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è** –∏ **–æ—Ç–≤–µ—Ç—å –æ–¥–∏–Ω —Ä–∞–∑, –æ–±–æ–±—â–∏–≤ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é**.

üìå –í –æ—Ç–≤–µ—Ç–µ:
- –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è.
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ, –∫—Ç–æ —Ç—ã (–Ω–µ –ø–∏—à–∏ "–†–æ–ª–ª–∞–Ω:" –∏ —Ç.–ø.).
- –í–∫–ª—é—á–∏ 1‚Äì2 –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–º–µ: –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫–æ–π —Å–∞–π—Ç –Ω—É–∂–µ–Ω, –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–∏–∑–∞–π–Ω—É.
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è ‚Äî –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∏ –±–æ–ª—å—à–µ –Ω–µ –ø–∏—à–∏.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏.

üí° –¶–µ–ª—å: –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤—ã—è—Å–Ω–∏—Ç—å, –Ω—É–∂–µ–Ω –ª–∏ —Å–∞–π—Ç –∏–ª–∏ –≤–∏–∑—É–∞–ª. –û–±—â–∞–π—Å—è –∂–∏–≤–æ, —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É.
"""
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –ë–î: {e}')
        return ""

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã
try:
    contacts = database_functions.get_contacts()
    logging.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
except Exception as e:
    logging.error(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –ë–î: {e}')
    print(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –ë–î:', e)
    exit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
try:
    results = database_functions.get_results()
    sent_phones = set(result['user_id'] for result in results)
    logging.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sent_phones)} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ –ë–î')
except:
    sent_phones = set()
    logging.info('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.')

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
client = TelegramClient('outreach_session', api_id, api_hash)

# –¢–µ–∫—É—â–∏–π prompt (–º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è)
current_prompt = get_current_prompt()

# –î–∏–∞–ª–æ–≥–æ–≤—ã–π prompt (–º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è)
dialog_prompt = get_dialog_prompt()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–∏–∞–ª–æ–≥–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –æ—Ç–∫–∞–∑–∞–≤—à–∏–º–∏—Å—è)
dialog_status = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
dialog_history = {}
# –ë—É—Ñ–µ—Ä –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (user_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π)
dialog_buffer = {}
# –¢–∞–π–º–µ—Ä—ã –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (user_id -> asyncio.Task)
dialog_timer = {}

REPLY_DELAY = 60  # —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞

# –Ø–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—Ç–∫–∞–∑–∞
REFUSAL_KEYWORDS = [
    '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –Ω—É–∂–Ω–æ', '–Ω–µ —Å–µ–π—á–∞—Å', '–ø–æ–∑–∂–µ', '—Å–ø–∞—Å–∏–±–æ, –Ω–æ –Ω–µ—Ç', '–Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é', '—è –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä—é',
    '–æ—Ç—Å—Ç–∞–Ω—å—Ç–µ', '–Ω–µ—Ç', 'no', 'not interested', 'fuck', '—Å–æ—Å–∏', '–æ—Ç–∫–∞–∑', '–Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å', 'stop', 'unsubscribe', '—Ö–≤–∞—Ç–∏—Ç', '–Ω–µ –ø–∏—à–∏—Ç–µ'
]

# –ö–æ—Ä–æ—Ç–∫–∏–µ —á–µ–ª–æ–≤–µ—á–Ω—ã–µ —Ä–µ–ø–ª–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
SHORT_REPLIES = [
    '–ü–æ–Ω—è–ª –≤–∞—Å! –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø–∏—à–∏—Ç–µ üòâ',
    '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–∞–π—Ç ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏.',
    '–û–∫, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ!',
    '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä',
    '–ï—Å–ª–∏ —á—Ç–æ ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!',
    '–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–∞–π—Ç –∏–ª–∏ –¥–∏–∑–∞–π–Ω.'
]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
def is_english(text):
    return bool(re.search(r'[a-zA-Z]', text))

def is_refusal(text):
    text_low = text.lower()
    return any(kw in text_low for kw in REFUSAL_KEYWORDS)

async def send_to_llm(prompt, context=""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ LLM —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (Gemini, Ollama, OpenAI)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = hash(prompt + context)
        if cache_key in llm_cache:
            logging.info('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç LLM')
            return llm_cache[cache_key]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        knowledge_context = get_relevant_knowledge(prompt + " " + context)
        enhanced_prompt = prompt + knowledge_context
        
        session = await get_session()
        
        if llm_provider == 'gemini':
            if not check_gemini_limits():
                return ""
            
            url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={gemini_api_key}"
            headers = {"Content-Type": "application/json"}
            data = {
                "contents": [
                    {"parts": [{"text": enhanced_prompt}]}
                ],
                "generationConfig": {
                    "temperature": 0.7,
                    "maxOutputTokens": 500,
                    "topP": 0.8
                }
            }
            
            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    try:
                        text = result["candidates"][0]["content"]["parts"][0]["text"]
                        logging.info(f'Gemini –æ—Ç–≤–µ—Ç–∏–ª: {text[:100]}...')
                        # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        if len(llm_cache) >= CACHE_SIZE:
                            llm_cache.pop(next(iter(llm_cache)))
                        llm_cache[cache_key] = text
                        update_gemini_limits()
                        return text
                    except Exception as e:
                        logging.error(f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Gemini: {e}, raw: {result}')
                        return ""
                else:
                    logging.error(f'–û—à–∏–±–∫–∞ Gemini API: {response.status} - {await response.text()}')
                    return ""
                    
        elif llm_provider == 'ollama':
            payload = {
                "model": model_name,
                "prompt": enhanced_prompt,
                "stream": False,
                "options": {
                    "temperature": 0.7,
                    "num_predict": 500
                }
            }
            
            async with session.post(ollama_api_url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    text = result.get('response', '').strip()
                    logging.info(f'Ollama –æ—Ç–≤–µ—Ç–∏–ª: {text[:100]}...')
                    # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    if len(llm_cache) >= CACHE_SIZE:
                        llm_cache.pop(next(iter(llm_cache)))
                    llm_cache[cache_key] = text
                    return text
                else:
                    logging.error(f'–û—à–∏–±–∫–∞ Ollama API: {response.status} - {await response.text()}')
                    return ""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å OpenAI –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
        else:
            logging.error(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π llm_provider: {llm_provider}')
            return ""
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM ({llm_provider}): {e}')
        return ""

async def analyze_response(client_response):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞: —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–π –æ—Ç–∫–∞–∑ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
    return await logic.analyze_response(client_response)

async def handle_buffered_reply(user_id, event):
    await asyncio.sleep(REPLY_DELAY)
    all_text = "\n".join(dialog_buffer[user_id])
    if user_id not in dialog_history:
        dialog_history[user_id] = []
    dialog_history[user_id].append(f"–ö–ª–∏–µ–Ω—Ç: {all_text}")
    result = await analyze_response(all_text)
    logging.info(f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {user_id}: {result}')
    if result == '–ù–ï–¢':
        dialog_status[user_id] = 'REFUSED'
        reply = random.choice(SHORT_REPLIES)
        await event.respond(reply)
        await client.send_message(notify_user_id, f'‚ùå –û–¢–ö–ê–ó –æ—Ç {user_id}\n–û—Ç–≤–µ—Ç: {all_text}\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}')
        with open(RESULTS_FILE, 'a', encoding='utf-8') as f:
            f.write(f'{user_id},REFUSED,"{all_text}","{result}"\n')
        dialog_buffer[user_id] = []
        return
    if result == '–î–ê':
        await client.send_message(notify_user_id, f'‚úÖ –ó–ê–ò–ù–¢–ï–†–ï–°–û–í–ê–ù {user_id}\n–û—Ç–≤–µ—Ç: {all_text}\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}')
    # –ö—Ä–∞—Ç–∫–∏–µ, —á–µ–ª–æ–≤–µ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ –æ—Ñ—Ñ—Ç–æ–ø–∞
    if result == 'ENGLISH':
        reply = 'Sorry, I can help only with website development and only in Russian üòä'
        await event.respond(reply)
        dialog_history[user_id].append(f"–†–æ–ª–ª–∞–Ω: {reply}")
        dialog_buffer[user_id] = []
        return
    if result == 'OFFTOP':
        reply = random.choice([
            '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–∞–π—Ç–æ–≤ –∏ –¥–∏–∑–∞–π–Ω–æ–º. –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?',
            '–Ø –∑–∞–Ω–∏–º–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å–∞–π—Ç–∞–º–∏ –∏ –¥–∏–∑–∞–π–Ω–æ–º. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–∞–π—Ç ‚Äî —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!',
            '–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Å —Å–∞–π—Ç–∞–º–∏. –ï—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ ‚Äî –ø–∏—à–∏—Ç–µ!'
        ])
        await event.respond(reply)
        dialog_history[user_id].append(f"–†–æ–ª–ª–∞–Ω: {reply}")
        dialog_buffer[user_id] = []
        return
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM
    history_text = "\n".join(dialog_history[user_id][-5:])
    dialog_prompt_enhanced = f"–¢—ã –†–æ–ª–ª–∞–Ω, –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –≤ –∫–æ–º–ø–∞–Ω–∏–∏ bored.kz.\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {dialog_prompt}\n\n–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{history_text}\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –±–µ–∑ —Ñ–æ—Ä–º–∞–ª–∏–∑–º–∞, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã."
    reply = await send_to_llm(dialog_prompt_enhanced)
    if not reply:
        reply = random.choice(SHORT_REPLIES)
    dialog_history[user_id].append(f"–†–æ–ª–ª–∞–Ω: {reply}")
    await event.respond(reply)
    logging.info(f'–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª {user_id}: {reply}')
    with open(RESULTS_FILE, 'a', encoding='utf-8') as f:
        f.write(f'{user_id},REPLY,"{all_text}","{reply}","{result}"\n')
    dialog_buffer[user_id] = []

async def main():
    global current_prompt, dialog_prompt
    await client.start(phone=phone)
    logging.info('–ö–ª–∏–µ–Ω—Ç Telegram –∑–∞–ø—É—â–µ–Ω!')
    print('–ö–ª–∏–µ–Ω—Ç Telegram –∑–∞–ø—É—â–µ–Ω!')

    @client.on(events.NewMessage(incoming=True))
    async def handler(event):
        global current_prompt, dialog_prompt
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç –≤–∞—Å
        if event.sender_id == notify_user_id:
            if event.text.startswith('/prompt '):
                new_prompt = event.text[len('/prompt '):].strip()
                current_prompt = new_prompt
                await event.respond(f'–ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:\n{current_prompt}')
                logging.info(f'–ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {current_prompt}')
            elif event.text.startswith('/dialogprompt '):
                new_dialog = event.text[len('/dialogprompt '):].strip()
                dialog_prompt = new_dialog
                await event.respond(f'–î–∏–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:\n{dialog_prompt}')
                logging.info(f'–î–∏–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {dialog_prompt}')
            elif event.text == '/reload_kb':
                files_count = reload_knowledge_base()
                await event.respond(f'‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {files_count} —Ñ–∞–π–ª–æ–≤.')
                logging.info(f'–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Ñ–∞–π–ª–æ–≤: {files_count}')
            elif event.text == '/kb_status':
                files_count = len(knowledge_base)
                await event.respond(f'üìö –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {files_count} —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.')
                logging.info(f'–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, —Ñ–∞–π–ª–æ–≤: {files_count}')
            elif event.text == '/reload_logic':
                importlib.reload(logic)
                await event.respond('–õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
            elif event.text == '/retry_wrong_closes':
                count = await retry_wrong_closes()
                await event.respond(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} –¥–∏–∞–ª–æ–≥–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º.')
            elif event.text == '/clear_cache':
                llm_cache.clear()
                logic.clear_analysis_cache()
                await event.respond('–ö—ç—à LLM –∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—á–∏—â–µ–Ω!')
            elif event.text == '/cache_stats':
                llm_stats = f"LLM –∫—ç—à: {len(llm_cache)} –∑–∞–ø–∏—Å–µ–π"
                analysis_stats = logic.get_cache_stats()
                analysis_text = f"–ê–Ω–∞–ª–∏–∑ –∫—ç—à: {analysis_stats['cache_size']} –∑–∞–ø–∏—Å–µ–π (–æ—Ç–∫–∞–∑—ã: {analysis_stats['refusals']}, –∏–Ω—Ç–µ—Ä–µ—Å—ã: {analysis_stats['interests']})"
                await event.respond(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:\n{llm_stats}\n{analysis_text}')
            elif event.text == '/status':
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
                total_sent = len([s for s in sent_phones])
                total_dialogs = len(dialog_history)
                total_refused = len([s for s in dialog_status.values() if s == 'REFUSED'])
                await event.respond(f'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {total_dialogs}\n–û—Ç–∫–∞–∑–æ–≤: {total_refused}')
            elif event.text == '/gemini_limits':
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ Gemini
                reset_gemini_daily_limit()
                remaining_daily = gemini_daily_limit - gemini_daily_requests
                time_since_last = time.time() - gemini_last_request_time
                cooldown_remaining = max(0, gemini_cooldown_seconds - time_since_last)
                
                status = f'ü§ñ –õ–∏–º–∏—Ç—ã Gemini:\n–î–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {gemini_daily_requests}/{gemini_daily_limit}\n–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining_daily}\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {time_since_last:.1f}—Å –Ω–∞–∑–∞–¥\n–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: {cooldown_remaining:.1f}—Å'
                await event.respond(status)
            else:
                await event.respond('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/prompt <—Ç–µ–∫—Å—Ç> - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç\n/dialogprompt <—Ç–µ–∫—Å—Ç> - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç\n/reload_kb - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n/kb_status - —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n/reload_logic - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏–∫—É –±–æ—Ç–∞\n/retry_wrong_closes - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º\n/clear_cache - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à LLM\n/cache_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞\n/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n/gemini_limits - –ª–∏–º–∏—Ç—ã Gemini')
                logging.warning(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.text}')
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            user_id = event.sender_id
            incoming_text = ""
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            if event.message.text:
                incoming_text = event.message.text
            elif event.message.voice or event.message.audio:
                # –ê—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                incoming_text = "[–ê–£–î–ò–û –°–û–û–ë–©–ï–ù–ò–ï]"
                if audio_notification_enabled:
                    await client.send_message(notify_user_id, f'üéµ –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –æ—Ç {user_id}')
                logging.info(f'–ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}')
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∞—É–¥–∏–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM
                audio_replies = [
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º? üòä",
                    "–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–º!",
                    "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∏ —è –æ—Ç–≤–µ—á—É! üìù",
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–º–æ—á—å! ‚úçÔ∏è"
                ]
                await event.respond(random.choice(audio_replies))
                return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            elif event.message.photo:
                incoming_text = "[–§–û–¢–û]"
                if audio_notification_enabled:
                    await client.send_message(notify_user_id, f'üì∑ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_id}')
                logging.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_id}')
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ñ–æ—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                photo_replies = [
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ! –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ? üòä",
                    "–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —Å–∞–π—Ç –≤–∞–º –Ω—É–∂–µ–Ω?",
                    "–ü–æ–Ω—è–ª! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å? üìù"
                ]
                await event.respond(random.choice(photo_replies))
                return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            elif event.message.document:
                incoming_text = "[–î–û–ö–£–ú–ï–ù–¢]"
                if audio_notification_enabled:
                    await client.send_message(notify_user_id, f'üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {user_id}')
                logging.info(f'–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {user_id}')
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                doc_replies = [
                    "–ü–æ–ª—É—á–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å? üìã",
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç! –û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç —Ç–µ–∫—Å—Ç–æ–º.",
                    "–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —Å–∞–π—Ç –≤–∞–º –Ω—É–∂–µ–Ω? üòä"
                ]
                await event.respond(random.choice(doc_replies))
                return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            elif event.message.sticker:
                incoming_text = "[–°–¢–ò–ö–ï–†]"
                logging.info(f'–ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä –æ—Ç {user_id}')
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å—Ç–∏–∫–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                sticker_replies = [
                    "üòä –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ?",
                    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–π —Å–∞–π—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                    "–ó–¥–æ—Ä–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ —Ç–µ–∫—Å—Ç–æ–º! üìù"
                ]
                await event.respond(random.choice(sticker_replies))
                return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            else:
                incoming_text = "[–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü –°–û–û–ë–©–ï–ù–ò–Ø]"
                logging.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç {user_id}')
                
                # –û—Ç–≤–µ—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await event.respond("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º! üìù")
                return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            
            if incoming_text:
                logging.info(f'–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {incoming_text}')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if user_id in dialog_status and dialog_status[user_id] == 'REFUSED':
                    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ')
                    return
                
                # –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                if user_id not in dialog_buffer:
                    dialog_buffer[user_id] = []
                dialog_buffer[user_id].append(incoming_text)
                # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
                if user_id in dialog_timer:
                    dialog_timer[user_id].cancel()
                # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
                dialog_timer[user_id] = asyncio.create_task(handle_buffered_reply(user_id, event))

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
    batch_size = 5  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
    for i in range(0, len(contacts), batch_size):
        batch = contacts[i:i+batch_size]
        tasks = []
        
        for contact in batch:
            if contact['phone'] not in sent_phones:
                task = process_contact(contact)
                tasks.append(task)
        
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á {i//batch_size + 1}/{(len(contacts) + batch_size - 1)//batch_size}")

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
    await asyncio.sleep(2)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–µ –¥–∏–∞–ª–æ–≥–∏
    await retry_wrong_closes()
    
    print("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def reload_knowledge_base():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    global knowledge_base
    knowledge_base = load_knowledge_base()
    return len(knowledge_base)

def parse_results_csv():
    """–ü–∞—Ä—Å–∏—Ç results.csv –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –¥–∏–∞–ª–æ–≥–æ–≤"""
    try:
        results_df = pd.read_csv(RESULTS_FILE, header=None, names=['user_id', 'status', 'text', 'reply', 'analysis'])
        for _, row in results_df.iterrows():
            if row['status'] == 'REFUSED':
                dialog_status[row['user_id']] = 'REFUSED'
        logging.info(f'–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len([s for s in dialog_status.values() if s == "REFUSED"])} —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–∫–∞–∑–∞')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ results.csv: {e}')

async def retry_wrong_closes():
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º"""
    try:
        results_df = pd.read_csv(RESULTS_FILE, header=None, names=['user_id', 'status', 'text', 'reply', 'analysis'])
        refused_rows = results_df[results_df['status'] == 'REFUSED']
        count = 0
        for _, row in refused_rows.iterrows():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –æ—Ç–∫–∞–∑
            if not is_refusal(row['text']):
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–∫–∞–∑–µ
                results_df = results_df.drop(results_df[(results_df['user_id'] == row['user_id']) & (results_df['status'] == 'REFUSED')].index)
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
                if row['user_id'] in dialog_status:
                    del dialog_status[row['user_id']]
                count += 1
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        results_df.to_csv(RESULTS_FILE, index=False, header=False)
        logging.info(f'–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤')
        return count
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ retry_wrong_closes: {e}')
        return 0

def reset_gemini_daily_limit():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Gemini"""
    global gemini_daily_requests, gemini_last_reset
    current_time = time.time()
    if current_time - gemini_last_reset > 86400:  # 24 —á–∞—Å–∞
        gemini_daily_requests = 0
        gemini_last_reset = current_time
        logging.info("–°–±—Ä–æ—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Gemini")

def check_gemini_limits():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã Gemini"""
    global gemini_request_count, gemini_daily_requests, gemini_minute_requests
    reset_gemini_daily_limit()
    now = time.time()
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ (—Å—Ç–∞—Ä—à–µ 60 —Å–µ–∫—É–Ω–¥)
    gemini_minute_requests = [t for t in gemini_minute_requests if now - t < 60]
    if len(gemini_minute_requests) >= gemini_rate_limit:
        logging.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç Gemini –ø–æ –º–∏–Ω—É—Ç–µ: {len(gemini_minute_requests)}/{gemini_rate_limit}")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        asyncio.create_task(client.send_message(notify_user_id, f'‚ùóÔ∏è–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç Gemini: {len(gemini_minute_requests)}/{gemini_rate_limit} –≤ –º–∏–Ω—É—Ç—É'))
        return False
    if gemini_daily_requests >= gemini_daily_limit:
        logging.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Gemini: {gemini_daily_requests}")
        asyncio.create_task(client.send_message(notify_user_id, f'‚ùóÔ∏è–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Gemini: {gemini_daily_requests}/{gemini_daily_limit}'))
        return False
    current_time = time.time()
    if current_time - gemini_last_request_time < gemini_cooldown_seconds:
        logging.warning("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Gemini")
        return False
    return True

def update_gemini_limits():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –ª–∏–º–∏—Ç–æ–≤ Gemini"""
    global gemini_request_count, gemini_last_request_time, gemini_daily_requests, gemini_minute_requests
    gemini_request_count += 1
    gemini_last_request_time = time.time()
    gemini_daily_requests += 1
    gemini_minute_requests.append(gemini_last_request_time)

async def process_contact(contact):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç"""
    try:
        phone = contact['phone']
        name = contact.get('name', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        current_prompt = get_current_prompt()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await send_to_llm(current_prompt, f"–ò–º—è: {name}")
        
        if message:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_message(phone, message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            database_functions.add_result(phone, 'SENT', message, '', '')
            database_functions.update_contact_status(contact['id'], 'SENT')
            
            sent_phones.add(phone)
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {name} ({phone}): {message[:50]}...")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(delay_seconds)
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {name} ({phone})")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact.get('name', 'Unknown')} ({contact['phone']}): {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact['phone']}: {e}")

if __name__ == '__main__':
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    parse_results_csv()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
