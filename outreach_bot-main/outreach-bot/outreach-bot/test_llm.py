import asyncio
import aiohttp
import config

async def test_gemini():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini API...")
    
    api_key = config.gemini_api_key
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"
    
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [
            {"parts": [{"text": "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}]}
        ],
        "generationConfig": {
            "temperature": 0.7,
            "maxOutputTokens": 100,
            "topP": 0.8
        }
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    result = await response.json()
                    print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
                    print(result)
                    
                    try:
                        text = result["candidates"][0]["content"]["parts"][0]["text"]
                        print(f"üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {text}")
                        return True
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                        return False
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

async def test_llm_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_to_llm –∏–∑ outreach_bot.py"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_to_llm...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ outreach_bot.py
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    
    try:
        from outreach_bot import send_to_llm
        
        prompt = "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"
        result = await send_to_llm(prompt, "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        
        if result:
            print(f"‚úÖ LLM –æ—Ç–≤–µ—Ç–∏–ª: {result}")
            return True
        else:
            print("‚ùå LLM –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def main():
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ LLM...")
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   - –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {config.llm_provider}")
    print(f"   - API –∫–ª—é—á: {config.gemini_api_key[:20]}...")
    print(f"   - –õ–∏–º–∏—Ç –≤ –º–∏–Ω—É—Ç—É: {config.gemini_rate_limit}")
    print(f"   - –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {config.gemini_daily_limit}")
    print()
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Gemini
    success1 = await test_gemini()
    
    # –¢–µ—Å—Ç 2: –§—É–Ω–∫—Ü–∏—è –∏–∑ outreach_bot.py
    success2 = await test_llm_function()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   - –ü—Ä—è–º–æ–π Gemini API: {'‚úÖ' if success1 else '‚ùå'}")
    print(f"   - –§—É–Ω–∫—Ü–∏—è send_to_llm: {'‚úÖ' if success2 else '‚ùå'}")
    
    if not success1:
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
        print("   - –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        print("   - API –∫–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 