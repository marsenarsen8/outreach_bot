import asyncio
import aiohttp
import config

async def test_gemini_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Gemini API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini API...")
    
    api_key = config.gemini_api_key
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"
    
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [
            {"parts": [{"text": "–¢—ã –†–æ–ª–ª–∞–Ω ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –≤ –∫–æ–º–ø–∞–Ω–∏–∏ bored.kz. –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–π—Ç—ã, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã, –≤–µ–±-—Å–µ—Ä–≤–∏—Å—ã, –ø–æ—Ä—Ç–∞–ª—ã –∏ –¥–µ–ª–∞–µ–º UX/UI-–¥–∏–∑–∞–π–Ω. –¶–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ—Ç 50 000 —Ç–µ–Ω–≥–µ. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ù–û –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —Ü–µ–ø–ª—è—é—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —Ö–æ–ª–æ–¥–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º."}]}
        ],
        "generationConfig": {
            "temperature": 0.7,
            "maxOutputTokens": 200,
            "topP": 0.8
        }
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    result = await response.json()
                    
                    try:
                        text = result["candidates"][0]["content"]["parts"][0]["text"]
                        print(f"‚úÖ LLM –æ—Ç–≤–µ—Ç–∏–ª:")
                        print(f"üìù {text}")
                        return True
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                        print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
                        return False
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

async def main():
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ LLM...")
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   - –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {config.llm_provider}")
    print(f"   - API –∫–ª—é—á: {config.gemini_api_key[:20]}...")
    print(f"   - –õ–∏–º–∏—Ç –≤ –º–∏–Ω—É—Ç—É: {config.gemini_rate_limit}")
    print(f"   - –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {config.gemini_daily_limit}")
    print()
    
    success = await test_gemini_simple()
    
    if success:
        print("\n‚úÖ LLM —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üí° –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        print("   - –õ–∏–º–∏—Ç–∞—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ outreach_bot.py")
        print("   - –õ–æ–≥–∏–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤")
        print("   - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏")
    else:
        print("\n‚ùå LLM –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

if __name__ == "__main__":
    asyncio.run(main()) 