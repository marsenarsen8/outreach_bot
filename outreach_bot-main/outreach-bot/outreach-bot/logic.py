import random
import re
from typing import Dict, Set

# –ö—ç—à –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤
analysis_cache: Dict[str, str] = {}

REFUSAL_KEYWORDS = {
    '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –Ω—É–∂–Ω–æ', '–Ω–µ —Å–µ–π—á–∞—Å', '–ø–æ–∑–∂–µ', '—Å–ø–∞—Å–∏–±–æ, –Ω–æ –Ω–µ—Ç', '–Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é', '—è –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä—é',
    '–æ—Ç—Å—Ç–∞–Ω—å—Ç–µ', '–Ω–µ—Ç', 'no', 'not interested', 'fuck', '—Å–æ—Å–∏', '–æ—Ç–∫–∞–∑', '–Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å', 'stop', 'unsubscribe', '—Ö–≤–∞—Ç–∏—Ç', '–Ω–µ –ø–∏—à–∏—Ç–µ'
}

INTEREST_KEYWORDS = {
    '–Ω—É–∂–µ–Ω —Å–∞–π—Ç', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', '–ª–µ–Ω–¥–∏–Ω–≥', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '—Ö–æ—á—É', 
    '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–∫–∞–∫–∏–µ —Å—Ä–æ–∫–∏', '–¥–∞', '–≥–æ—Ç–æ–≤', '–Ω–æ–º–µ—Ä', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–æ–±—Å—É–¥–∏—Ç—å'
}

BOT_KEYWORDS = {
    '–±–æ—Ç', 'memory', 'ai', 'openai', '—á–∞—Ç–≥–ø—Ç', '—á–∞—Ç', '—Ä–æ–±–æ—Ç', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'
}

SHORT_REPLIES = [
    '–ü–æ–Ω—è–ª –≤–∞—Å! –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø–∏—à–∏—Ç–µ üòâ',
    '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–∞–π—Ç ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏.',
    '–û–∫, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ!',
    '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä',
    '–ï—Å–ª–∏ —á—Ç–æ ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!',
    '–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–∞–π—Ç –∏–ª–∏ –¥–∏–∑–∞–π–Ω.'
]

def is_english(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã"""
    return bool(re.search(r'[a-zA-Z]', text))

def is_refusal(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–∫–∞–∑–æ–º"""
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in REFUSAL_KEYWORDS)

def analyze_response_fast(client_response: str) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if client_response in analysis_cache:
        return analysis_cache[client_response]
    
    text_lower = client_response.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–∞–∑
    if any(keyword in text_lower for keyword in REFUSAL_KEYWORDS):
        result = '–ù–ï–¢'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    elif is_english(client_response):
        result = 'ENGLISH'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ—Ñ—Ç–æ–ø
    elif any(keyword in text_lower for keyword in BOT_KEYWORDS):
        result = 'OFFTOP'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
    elif any(keyword in text_lower for keyword in INTEREST_KEYWORDS):
        result = '–î–ê'
    else:
        result = 'CONTINUE'
    
    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    analysis_cache[client_response] = result
    return result

async def analyze_response(client_response: str) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    return analyze_response_fast(client_response)

async def generate_human_reply(client_response: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    return random.choice(SHORT_REPLIES)

def clear_analysis_cache():
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∞–Ω–∞–ª–∏–∑–∞"""
    analysis_cache.clear()

def get_cache_stats() -> Dict[str, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    return {
        'cache_size': len(analysis_cache),
        'refusals': sum(1 for v in analysis_cache.values() if v == '–ù–ï–¢'),
        'interests': sum(1 for v in analysis_cache.values() if v == '–î–ê'),
        'continues': sum(1 for v in analysis_cache.values() if v == 'CONTINUE')
    } 