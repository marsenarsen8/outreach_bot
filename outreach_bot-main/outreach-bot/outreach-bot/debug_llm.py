import asyncio
import aiohttp
import config
import time

async def debug_llm_step_by_step():
    """–ü–æ—à–∞–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ LLM"""
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ LLM...")
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\nüìã –®–∞–≥ 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print(f"   - –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {config.llm_provider}")
    print(f"   - API –∫–ª—é—á: {config.gemini_api_key[:20]}...")
    print(f"   - –õ–∏–º–∏—Ç –≤ –º–∏–Ω—É—Ç—É: {config.gemini_rate_limit}")
    print(f"   - –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {config.gemini_daily_limit}")
    print(f"   - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {config.gemini_cooldown_seconds}—Å")
    
    # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    print("\nüìã –®–∞–≥ 2: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Gemini")
    api_key = config.gemini_api_key
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"
    
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [
            {"parts": [{"text": "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."}]}
        ],
        "generationConfig": {
            "temperature": 0.7,
            "maxOutputTokens": 100,
            "topP": 0.8
        }
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            print(f"   üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫: {url}")
            print(f"   üì§ –î–∞–Ω–Ω—ã–µ: {data}")
            
            async with session.post(url, headers=headers, json=data) as response:
                print(f"   üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    result = await response.json()
                    print(f"   ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    try:
                        text = result["candidates"][0]["content"]["parts"][0]["text"]
                        print(f"   üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {text}")
                        print("   ‚úÖ LLM —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        return True
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                        print(f"   üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
                        return False
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ outreach_bot.py
    print("\nüìã –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –±–æ—Ç–∞")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_current_prompt
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    
    try:
        from outreach_bot import get_current_prompt
        
        prompt = get_current_prompt()
        print(f"   üìù –ü—Ä–æ–º–ø—Ç –∏–∑ –±–æ—Ç–∞:")
        print(f"   {prompt[:200]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç
        data = {
            "contents": [
                {"parts": [{"text": prompt}]}
            ],
            "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 200,
                "topP": 0.8
            }
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                print(f"   üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    result = await response.json()
                    try:
                        text = result["candidates"][0]["content"]["parts"][0]["text"]
                        print(f"   ‚úÖ LLM –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø—Ä–æ–º–ø—Ç –±–æ—Ç–∞:")
                        print(f"   üìù {text}")
                        return True
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                        return False
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return False

async def main():
    success = await debug_llm_step_by_step()
    
    if success:
        print("\n‚úÖ LLM —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üí° –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        print("   - –õ–æ–≥–∏–∫–µ –ª–∏–º–∏—Ç–æ–≤ –≤ outreach_bot.py")
        print("   - –û–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–æ–≤")
        print("   - –ü—Ä–æ–º–ø—Ç–∞—Ö –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤")
    else:
        print("\n‚ùå LLM –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üí° –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
        print("   - API –∫–ª—é—á")
        print("   - –õ–∏–º–∏—Ç—ã")
        print("   - –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

if __name__ == "__main__":
    asyncio.run(main()) 