#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
"""

import subprocess
import sys
import os
import time
import sqlite3

def test_broadcast():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    conn = sqlite3.connect('outreach_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM contacts WHERE status = "NOT_SENT"')
    not_sent_count = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM contacts WHERE status = "SENT"')
    sent_count = cursor.fetchone()[0]
    conn.close()
    
    print(f"üìä –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {not_sent_count}")
    print(f"üìä –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
    
    if not_sent_count == 0:
        print("‚ùå –ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        process = subprocess.Popen([sys.executable, 'outreach_bot.py'], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE)
        
        print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        time.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        if process.poll() is None:
            print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç
            process.terminate()
            process.wait()
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:")
            print(f"STDOUT: {stdout.decode()}")
            print(f"STDERR: {stderr.decode()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    test_broadcast() 